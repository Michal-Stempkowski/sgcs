@startuml

package datalayer #DDDDDD {

class SymbolTranslator

}

package core {
    package rule {
        class Rule
        class RulePopulation
        class RulePopulationAccessViolationError
        class TerminalRule
        class StochasticRulePopulation
    }
    package symbol {
        class Sentence
        class Symbol
    }
}

!include core.wsdi
!include utils.wsdi

package core {

    class Symbol
    Symbol : __init__(self, symbol_id)
    Symbol : human_friendly_representation(self, abs_shift)

    class SymbolTranslator
    SymbolTranslator --> Symbol: translates

    class Sentence
    Sentence : __init__(self, symbols, is_positive_sentence=None)
    Sentence : is_positive_sentence
    Sentence : __len__(self)
    Sentence : get_symbol(self, index)
    Sentence --o Symbol

    class RulePopulationAccessViolationError

    class RulePopulation
    RulePopulation : __init__(self, starting_symbol, universal_symbol=None, previous_instance=None, max_non_terminal_symbols=32)
    RulePopulation : starting_symbol
    RulePopulation : universal_symbol
    RulePopulation : max_non_terminal_symbols
    RulePopulation : symbol_shift()
    RulePopulation : get_all_non_terminal_rules(self)
    RulePopulation : add_rule(self, rule, randomizer)
    RulePopulation : get_rules_by_right(self, pair)
    RulePopulation : get_terminal_rules(self, symbol=None)
    RulePopulation : get_random_non_terminal_symbol(self, randomizer)
    RulePopulation : get_random_rules(self, randomizer, terminal, size)
    RulePopulation : remove_rule(self, rule)
    RulePopulation : get_random_rules_matching_filter(self, randomizer, terminal, size, filter)
    RulePopulation : has_rule(self, rule)
    RulePopulation --o Rule
    RulePopulation --> Symbol: creates
    RulePopulation --> RulePopulationAccessViolationError: raises
    RulePopulation ..> Randomizer: uses

    class StochasticRulePopulation
    StochasticRulePopulation : rule_probabilities
    StochasticRulePopulation : left_side_probabilities
    StochasticRulePopulation : get_normalized_rule_probability(self, rule)
    StochasticRulePopulation : perform_probability_estimation(self, rule, fitness_getter)
    StochasticRulePopulation --|> RulePopulation

    class Rule
    Rule : __init__(self, parent, left_child, right_child)
    Rule : parent
    Rule : left_child
    Rule : right_child
    Rule : is_terminal_rule(self)
    Rule : human_friendly_representation(self, shift, starting_symbol, universal_symbol)

    class TerminalRule
    TerminalRule --|> Rule
    TerminalRule : __init__(self, parent, child)

}

@enduml