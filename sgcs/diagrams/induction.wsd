@startuml
package induction {

    Detector ..> RulePopulation: uses
    Detector "1" --> "[1;*]" Production: creates
    Detector ..> Environment: uses
    Detector : __init__(self, coordinates)
    Detector : generate_production(self, environment, rule_population): list<Production>
    Detector : coordinates: tuple

    ProductionPool --o Production
    ProductionPool : non_empty_productions
    ProductionPool : empty_productions
    ProductionPool : add_production(self, production)
    ProductionPool : is_empty(self)
    ProductionPool : get_effectors(self)
    ProductionPool : get_unsatisfied_detectors(self)

    Production : __init__(self, detector, rule)
    Production : detector
    Production : rule
    Production : is_empty(self)
    Production : is_terminal(self)
    Production : get_coordinates(self)


    EmptyProduction --|> Production
    EmptyProduction : __init__(self, detector)
    EmptyProduction : detector


    enum CykTypeId {
        symbol_pair_executor
        parent_combination_executor
        cell_executor
        row_executor
        table_executor
        production_pool
        environment
        cyk_result
        cyk_terminal_cell_executor
    }

    package CykExecutors {
    '&begin_cyk_executors

        CykExecutor --* "1" CykTypeId
        CykExecutor : __init__(self, child_level, executor_factory)
        CykExecutor : create_child_executor(self, *args)

        CykSymbolPairExecutor --|> CykExecutor
        CykSymbolPairExecutor --> Detector: creates
        CykSymbolPairExecutor ..> RulePopulation: uses
        CykSymbolPairExecutor ..> Environment: uses
        CykSymbolPairExecutor <..> CykParentCombinationExecutor: uses
        CykSymbolPairExecutor : __init__(self, parent_executor, left_id, right_id, executor_factory)
        CykSymbolPairExecutor : execute(self, environment, rule_population)
        CykSymbolPairExecutor : get_coordinates(self)
        CykSymbolPairExecutor : parent_executor

        CykParentCombinationExecutor --|> CykExecutor
        CykParentCombinationExecutor ..> RulePopulation: uses
        CykParentCombinationExecutor ..> Environment: uses
        CykParentCombinationExecutor : __init__(self, cell_executor, shift, executor_factory)
        CykParentCombinationExecutor : parent_executor
        CykParentCombinationExecutor : current_row
        CykParentCombinationExecutor : current_col
        CykParentCombinationExecutor : shift
        CykParentCombinationExecutor : execute(self, environment, rule_population)
        CykParentCombinationExecutor : get_coordinates(self)

        CykCellExecutor --|> CykExecutor
        CykCellExecutor ..> RulePopulation: uses
        CykCellExecutor ..> Environment: uses
        CykCellExecutor <..> CykParentCombinationExecutor: uses
        CykCellExecutor : __init__(self, row_executor, column, executor_factory)
        CykCellExecutor : parent_executor
        CykCellExecutor : current_row
        CykCellExecutor : current_col
        CykCellExecutor : execute(self, environment, rule_population)

        CykRowExecutor --|> CykExecutor
        CykRowExecutor ..> RulePopulation: uses
        CykRowExecutor ..> Environment: uses
        CykRowExecutor <..> CykCellExecutor
        CykRowExecutor : __init__(self, table_executor, row, executor_factory)
        CykRowExecutor : parent_executor
        CykRowExecutor : current_row
        CykRowExecutor : execute(self, environment, rule_population)

        CykTableExecutor --|> CykExecutor
        CykTableExecutor ..> RulePopulation: uses
        CykTableExecutor ..> Environment: uses
        CykTableExecutor <..> CykRowExecutor: uses
        CykTableExecutor : __init__(self, executor_factory)
        CykTableExecutor : execute(self, environment, rule_population)
        CykTableExecutor --> CykResult: creates
        CykTableExecutor <..> CykFirstRowExecutor: uses

        CykFirstRowExecutor --|> CykRowExecutor
        CykFirstRowExecutor ..> RulePopulation: uses
        CykFirstRowExecutor ..> Environment: uses
        CykFirstRowExecutor : __init__(self, table_executor, row, executor_factory)
        CykFirstRowExecutor : execute(self, environment, rule_population)
        CykFirstRowExecutor <..> CykTerminalCellExecutor

        CykTerminalCellExecutor --|> CykCellExecutor
        CykTerminalCellExecutor ..> RulePopulation: uses
        CykTerminalCellExecutor ..> Environment: uses
        CykTerminalCellExecutor : __init__(self, row_executor, column, executor_factory)
        CykTerminalCellExecutor : execute(self, environment, rule_population)
        CykTerminalCellExecutor --> Detector: creates

    '&end_cyk_executors
    }

    class CykResult
    CykResult : belongs_to_grammar

    '&alt_cyk_executors CykExecutors ..> Environment: uses
    '&alt_cyk_executors CykExecutors ..> Production: uses
    '&alt_cyk_executors CykExecutors ..> RulePopulation: uses
    '&alt_cyk_executors CykExecutors --> CykResult: creates
    '&alt_cyk_executors CykExecutors --* "1" CykTypeId
    '&alt_cyk_executors CykExecutors --> Detector: creates

    Environment ..* "1" Sentence
    Environment : __init__(self, sentence, factory)
    Environment : sentence
    Environment : cyk_table
    Environment : get_symbols(self, absolute_coordinates)
    Environment : add_production(self, production)
    Environment : get_left_parent_symbol_count(self, coordinates_with_shift)
    Environment : get_right_parent_symbol_count(self, coordinates_with_shift)
    Environment : get_row_length(self, row)
    Environment : get_sentence_length(self)
    Environment : validate_absolute_coordinates(self, coordinates)
    Environment : get_sentence_symbol(self, index)
    Environment : get_detector_symbols(self, cords)
    Environment : is_sentence_positive(self)
    Environment : get_unsatisfied_detectors(self, coordinates)

    Environment ..> ProductionPool: creates (factory)
    Environment ..> Production: uses

    SymbolTranslator --> Symbol: translates

    Sentence --o Symbol
    Sentence : __init__(self, symbols, is_positive_sentence=None)
    Sentence : is_positive_sentence
    Sentence : __len__(self)
    Sentence : get_symbol(self, index)

    class Symbol
    Symbol : __init__(self, symbol_id)

    RulePopulation : __init__(self, starting_symbol, universal_symbol=None, previous_instance=None)
    RulePopulation : starting_symbol
    RulePopulation : universal_symbol
    RulePopulation : max_terminal_symbols
    RulePopulation : add_rule(self, rule)
    RulePopulation : get_rules_by_right(self, pair)
    RulePopulation : get_terminal_rules(self, symbol)
    RulePopulation : get_random_non_terminal_symbol(self, randomizer)
    RulePopulation --o Rule
    RulePopulation --> Symbol: creates

    Rule : __init__(self, parent, left_child, right_child)
    Rule : parent
    Rule : left_child
    Rule : right_child
    Rule : is_terminal_rule(self)

    TerminalRule --|> Rule
    TerminalRule : __init__(self, parent, child)


    class CykService
    CykService : __init__(self, factory, configuration, randomizer)
    CykService : configuration
    CykService : randomizer
    CykService : perform_cyk(self, rule_population, sentence)
    CykService ..> CykExecutors: creates (factory)
    CykService ..> Sentence: uses
    CykService ..> CykResult: uses
    CykService ..> Environment: creates (factory)
    CykService --* "1" CykTypeId

    enum CykReasoningStatus {
        unknown_terminal_symbol
        no_effector_found
        no_starting_symbol
    }

    package Coverage {
        '&begin_coverage

        class CoverageOperator
        CoverageOperator : cover(self, environment, rule_population, coordinates)
        CoverageOperator : cover_impl(self, environment, rule_population, coordinates)
        CoverageOperator ..> Environment: uses
        CoverageOperator ..> RulePopulation: uses
        CoverageOperator --> CykReasoningStatus: uses

        class TerminalCoverageOperator
        TerminalCoverageOperator --|> CoverageOperator

        class UniversalCoverageOperator
        UniversalCoverageOperator --|> CoverageOperator

        class StartingCoverageOperator
        StartingCoverageOperator --|> CoverageOperator

        class AggressiveCoverageOperator
        AggressiveCoverageOperator --|> CoverageOperator

        class FullCoverageOperator
        FullCoverageOperator --|> CoverageOperator

        'class CoverageMethod

        class CoverageOperations
        CoverageOperations "0" --* "*" CoverageOperator
        'CoverageOperations "0" --* "*" CoverageMethod
        CoverageOperations ..> Environment: uses
        CoverageOperations ..> RulePopulation: uses
        CoverageOperations --> Rule: creates
        CoverageOperations ..> CykService: uses
        '&end_coverage
    }

    '&alt_coverage Coverage ..> Environment: uses
    '&alt_coverage Coverage ..> RulePopulation: uses
    '&alt_coverage Coverage --> Rule: creates
}

package datalayer {
    SymbolTranslator --() ExternalSymbol: translates
}

@enduml
