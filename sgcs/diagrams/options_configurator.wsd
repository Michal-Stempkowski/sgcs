@startuml

!include datalayer.wsdi
hide SymbolTranslator
hide EagerFileFetcher
hide EagerTokenizer
hide RulePopulationJsonizer

!include options_configurator.wsdi

!include dynamic_gui.wsdi
hide DynamicRoot

!include rule_adding.wsdi
hide AddingRuleSupervisor

!include generic_widget.wsdi

title options_configurator

package gui.generated #DDDDDD {
	class Ui_OptionsConfiguratorGen < generated by Qt >
}

package options_configurator #FFFFFF {

class AlgorithmVariant {
	name
	mk_pairs(*variants)
	__init__(self, name)
	create_new_configuration(self)
	supported_statistics(self)
}

class SGcsAlgorithmVariant
SGcsAlgorithmVariant --|> AlgorithmVariant

class GcsAlgorithmVariant
GcsAlgorithmVariant --|> AlgorithmVariant

class OptionsConfigurator {
	ALGORITHM_VARIANTS
	DEFAULT_ALGORITHM_VARIANT_STR
	STATISTICS_CONFIGURATIONS

	last_directory
	selector_bindings
	configuration
	current_variant
	selected_statistics

	__init__(self, last_directory)
	init_gui(self)
	reset_gui(self)
	update_dynamic_nodes(self)
	bind_logic(self)
	bind_spinner(self, widget)
	bind_checkbox(self, widget)
	bind_combobox(self, widget)
	on_gui_change(self)
	on_variant_changed(self, variant_str)
	variant_changed__reset_gui(self)
	update_selectors(self)
}
OptionsConfigurator "1" --o "1..*" AlgorithmVariant
OptionsConfigurator "1" --o "1..*" EvolutionSelectorBinding
OptionsConfigurator --> refreshes_dynamics: uses
OptionsConfigurator --* AutoUpdater
OptionsConfigurator --* Ui_OptionsConfiguratorGen
OptionsConfigurator --* DynamicNode
OptionsConfigurator --> BlockSignals: uses
OptionsConfigurator --|> GenericWidget

class EvolutionSelectorBinding {
	EVOLUTION_SELECTOR_MAP
	RIGHT_EVOLUTION_SELECTOR_MAP
	EVOLUTION_SELECTOR_NAMES
	DEFAULT_SELECTOR

	index
	type_widget
	tournament_widget
	options_configurator
	internal_state

	__init__(self, index, type_widget, tournament_widget, options_configurator)
	bind_logic(self)
	init_gui(self)
	reset_gui(self)
	pull_new_state(self, new_state)
	on_selector_changed(self, selector_name)
	is_in_tournament_mode(self)
	create_dynamic_tournament_node(self)
	on_tournament_size_changed(self)
}
EvolutionSelectorBinding ..* OptionsConfigurator
EvolutionSelectorBinding --> DynamicNode: creates
EvolutionSelectorBinding --> feed_with_data: uses

class ClassicalStatisticsAutoUpdater {
	def __init__(self, options_configurator)
}
ClassicalStatisticsAutoUpdater --|> AutoUpdater
ClassicalStatisticsAutoUpdater *--* OptionsConfigurator

class CrowdingAutoUpdater {
	def __init__(self, options_configurator)
}
CrowdingAutoUpdater --|> AutoUpdater
CrowdingAutoUpdater *--* OptionsConfigurator

class ElitismAutoUpdater {
	def __init__(self, options_configurator)
}
ElitismAutoUpdater --|> AutoUpdater
ElitismAutoUpdater *--* OptionsConfigurator

class EvolutionAutoUpdater {
	def __init__(self, options_configurator)
}
EvolutionAutoUpdater --|> AutoUpdater
EvolutionAutoUpdater *--* OptionsConfigurator

class InductionAutoUpdater {
	def __init__(self, options_configurator)
}
InductionAutoUpdater --|> AutoUpdater
InductionAutoUpdater *--* OptionsConfigurator

class MainBoxAutoUpdater {
	serializer
	def __init__(self, options_configurator)
	on_reset_clicked(options_configurator)
	on_save_clicked(self, options_configurator)
	on_open_clicked(self, options_configurator)
}
MainBoxAutoUpdater --|> AutoUpdater
MainBoxAutoUpdater *--* OptionsConfigurator
MainBoxAutoUpdater --* BasicJsonizer

class RootAutoUpdater {
	STATISTICS_CONFIGURATION_MAP
	RIGHT_STATISTICS_CONFIGURATION_MAP
	def __init__(self, options_configurator)
}
RootAutoUpdater --|> AutoUpdater
RootAutoUpdater *--* OptionsConfigurator

class RulesAutoUpdater {
	RULE_ADDING_HINTS_MAP
	RIGHT_RULE_ADDING_HINTS_MAP
	RULE_ADDING_HINTS
	def __init__(self, options_configurator)
}
RulesAutoUpdater --|> AutoUpdater
RulesAutoUpdater *--* OptionsConfigurator
RulesAutoUpdater --> AddingRuleStrategyHint: uses

}

@enduml
