@startuml

!include runner.wsdi

!include dynamic_gui.wsdi
hide refreshes_dynamics
hide BlockSignals
hide feed_with_data

!include executors.wsdi

!include proxy.wsdi

!include generic_widget.wsdi

!include scheduler.wsdi

package gui.generated #DDDDDD {
    class Ui_runner < generated by Qt >
}

package runner #FFFFFF {
    class RunPostMortemModel {
        max_steps
        is_done
        task_no
        __init__(self)
    }

    class RunVolatileModel {
        start_time
        progress
        end_time
        task_no
        __init__(self)
    }

    class RunProgressAutoUpdater {
        __init__(self, run_progress_view)
    }
    RunProgressAutoUpdater --|> AutoUpdater
    RunProgressAutoUpdater ..* RunProgressView
    RunProgressAutoUpdater ..> RunVolatileModel
    RunProgressAutoUpdater ..> RunPostMortemModel
    RunProgressAutoUpdater ..> RunnerGuiModel

    class RunProgressView {
        START_TIME_LABEL
        CURRENT_STEP_LABEL
        END_TIME_LABEL
        TOTAL_STEPS_LABEL

        index
        runner
        groupbox
        start_time_label
        start_time_line
        progress_label
        progress_bar
        end_time_label
        end_time_line
        step_label
        steps_line

        __init__(self, index, runner)
    }
    RunProgressView --|> DynamicRoot
    RunProgressView *--* Runner


    enum SimulationPhases {
        INIT
        SETUP
        LEARNING
        TESTING
        COLLECTING
        DONE
        ERROR
        PERMISSION_ERROR
    }

    class RunnerSimulationDataAutoUpdater {
        __init__(self, runner)
    }
    RunnerSimulationDataAutoUpdater --|> AutoUpdater
    RunnerSimulationDataAutoUpdater *--* Runner
    RunnerSimulationDataAutoUpdater ..> RunnerGuiModel

    class RunnerGuiModel {
        FIELD_UNDEFINED

        tasks_progress
        current_input
        current_config
        current_phase
        runs

        __init__(self)
    }

    class SimulationWorker <extends QtCore.QThread > {
        TASK_CONFIRMED_FINISHED_SIGNAL
        ALL_TASKS_FINISHED_SIGNAL

        runner
        is_running
        simulation_executor
        current_data
        root_dir

        __init__(self, runner)
        run(self)
    }
    SimulationWorker *--* Runner
    SimulationWorker --* SimulationExecutor
    SimulationWorker --* RunnerGuiModel
    SimulationWorker --* SimulationPhases

    class PartialInformationWorker < extends QtCore.QThread > {
        TIMEOUT

        runner
        is_running

        __init__(self, runner)
        run(self)
    }
    PartialInformationWorker *--* Runner
    PartialInformationWorker --> PyQtAwareAsyncGcsSimulator: uses
    PartialInformationWorker --> PyQtAwareGcsRunner: uses
    PartialInformationWorker --> RunPostMortemModel: creates

    class Runner {
        MAX_RUNS
        REFRESH_GUI_TIME

        scheduler
        input_queue
        simulation_worker
        partial_information_worker
        run_progress_views
        run_progress_data
        run_volatile_data
        update_timer

        __init__(self, scheduler)
        on_gui_invalidated(self)
        close_event_with_cleanup(self, ev)
        on_all_tasks_finished(self)
    }
    Runner --|> GenericWidget
    Runner ..* Scheduler
    Runner --* RunVolatileModel
    Runner --* RunPostMortemModel
    Runner --* Ui_runner
    Runner --> DynamicNode: creates
}

@enduml
